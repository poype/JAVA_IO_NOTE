Reactor 线程模型：
是一种基于事件驱动的编程模型，核心思想是将 IO 操作（如网络请求）的监听和处理分离，通过单线程或多线程处理多个连接的事件，实现高效的并发处理。
它通过事件循环（Event Loop）机制，持续监听并分发事件到对应的处理器，避免为每个连接创建独立线程，从而降低资源消耗。

为什么叫 “Reactor”？
“Reactor” 直译是 “反应堆”，这里类比物理中 “反应堆” 的 “事件触发” 特性：
Reactor 作为事件的 “枢纽”，持续 “监听” 事件（如连接建立、数据到达），并将事件 “分发” 给对应的处理器（Handler），
类似反应堆中粒子碰撞触发连锁反应的过程。
Reactor强调通过事件驱动实现对多个连接的统一管理和响应。

单 Reactor 单线程模型：
一个线程负责监听所有 IO 事件，并直接处理事件（如读取数据、业务逻辑）。
优点：简单轻量，适用于低并发场景（如 Redis 单线程模型）。
缺点：线程负载过重时易成为瓶颈。

主从 Reactor 多线程模型：
主 Reactor 线程组：负责接收客户端连接，将连接分配给从 Reactor。
从 Reactor 线程组：每个从 Reactor 处理分配到的连接的 IO 事件，业务逻辑由独立线程池处理。
典型案例：Netty 框架的线程模型，通过主从 Reactor 分离连接建立和 IO 处理，提升并发性能。



Netty:
SimpleChannelInboundHandler 默认会释放接收到的消息，并阻止消息继续传递到后续的 SimpleChannelInboundHandler。
所以如果pipeline中有多个SimpleChannelInboundHandler，只有第一个SimpleChannelInboundHandler可以读取到消息。

如果需要多个处理器依次处理同一消息，不要使用 SimpleChannelInboundHandler，改用 ChannelInboundHandlerAdapter 并手动传递消息
ctx.fireChannelRead(msg); // 手动将消息传递给下一个处理器

SimpleChannelInboundHandler	    自动释放消息，阻止传递到后续同类型处理器
ChannelInboundHandlerAdapter	需要手动调用 ctx.fireChannelRead(msg) 传递消息

